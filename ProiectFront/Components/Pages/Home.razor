@page "/"
@using ProiectFront.Models
@using ProiectFront.Clients
@using System.Threading
@inject DataClient DataClient
@rendermode InteractiveServer

<!-- Add viewport meta tag for mobile scaling -->
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.12.1/font/bootstrap-icons.min.css">

</head>

<style>
    /* General page layout */
    .row {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        margin: 20px auto;
        width: 100%;
        text-align: center;
    }

    .text-primary {
        color: #198754;
        font-size: 26px;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        width: 100%;
    }

    /* Card style */
    .cards-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .card {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 15px 0;
        width: 100%;
        max-width: 400px;
        transition: transform 0.3s ease;
        text-align: center;
    }


    .card:hover {
        transform: scale(1.05);
    }

    .card-body {
        text-align: center;
    }

    .card-title {
        font-size: 24px;
        font-weight: bold;
    }

    .card-text {
        font-size: 18px;
    }

    /* LED switch block */
    .switch-card {
        text-align: center;
    }

    .led-label-top {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .switch-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
    }

    .switch-text {
        font-size: 16px;
        font-weight: 500;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
    }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: none;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    .slider.round {
        border-radius: 34px;
    }

    .slider.round:before {
        border-radius: 50%;
    }

    /* Icon alignment */
    .led-label-top i,
    .card-title i,
    .card-text i {
        vertical-align: middle;
        font-size: 1.3em;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card {
            width: 90%;
        }

        .switch-wrapper {
            gap: 10px;
            flex-direction: row;
        }

        .switch-wrapper,
        .switch-card {
            justify-content: center;
            margin: 0 auto;
        }

        .led-label-top {
            margin-bottom: 10px;
            font-size: 18px;
        }

        .card-title {
            font-size: 20px;
        }

        .card-text {
            font-size: 16px;
        }
    }
</style>



<PageTitle>Home</PageTitle>



<div class="row">
    <div class="text-primary">Home Temperature</div>
</div>

<div class="cards-container">
    @if (data != null)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-thermometer-half" style="margin-right:8px; color:#dc3545;"></i>
                    Temperature: @data.Temperature &deg;C
                </h5>
                <p class="card-text">
                    <i class="bi bi-droplet" style="margin-right:8px; color:#0d6efd;"></i>
                    Humidity: @data.Humidity%
                </p>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-thermometer-half" style="margin-right:8px; color:#dc3545;"></i>
                    Temperature: N/A
                </h5>
                <p class="card-text">
                    <i class="bi bi-droplet" style="margin-right:8px; color:#0d6efd;"></i>
                    Humidity: N/A
                </p>
            </div>
        </div>
    }

    <div class="card">
        <div class="card-body switch-card">
            <div class="led-label-top">
                <i class="bi bi-lightbulb" style="margin-right:6px; color: #ffc107;"></i> LED
            </div>
            <div class="switch-wrapper">
                <span class="switch-text">Off</span>
                <label class="switch">
                    <input type="checkbox" checked="@(data?.LedState ?? false)" @onchange="ToggleLed" />
                    <span class="slider round"></span>
                </label>
                <span class="switch-text">On</span>
            </div>
        </div>
    </div>
</div>


@code {
private Data? data;
private Timer? timer;
private string? errorMessage;
private bool refreshData = true;

private async Task ToggleLed(ChangeEventArgs e)
{
    if (data != null)
    {
        bool newState = (bool)e.Value;
        try
        {
            if (newState)
                await DataClient.TurnLedOnAsync();
            else
                await DataClient.TurnLedOffAsync();

            data.LedState = newState; // Update local state
                // Refresh UI
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating LED state: {ex.Message}";
            data.LedState = !newState; // Revert on error
            
        }
    }
}

protected override async Task OnInitializedAsync()
{
await FetchData();
}

protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (refreshData)
{
refreshData = false;
await Task.Delay(5000); // Wait 5 seconds
await FetchData();
StateHasChanged();
refreshData = true;
}
}

private async Task FetchData()
{
try
{
errorMessage = null;
data = await DataClient.GetDataAsync();

if (data == null)
{
errorMessage = " - No data available from server.";
}
}
catch (Exception ex)
{
errorMessage = $" - Error: {ex.Message}";
Console.WriteLine($"Error fetching data: {ex.Message}");
}
}
}
