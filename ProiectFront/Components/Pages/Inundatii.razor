@page "/inundatii"
@inject ProiectFront.Clients.DataClient DataClient
@rendermode InteractiveServer

<PageTitle>Inundatii</PageTitle>

<div class="row">
    <div class="text-primary">History of Inundatii Events</div>
</div>
<button class="btn btn-primary mb-3" @onclick="RefreshData">
    <i class="bi bi-arrow-clockwise" style="margin-right:6px;"></i> Refresh
</button>

<div class="cards-container">
    @if (inundatiiData != null && inundatiiData.Any())
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="bi bi-water" style="margin-right:8px; color:#0d6efd;"></i>
                    Inundatii Records
                </h5>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Humidity</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var record in inundatiiData)
                        {
                            <tr>
                                <td>@record.datetime.ToString("yyyy-MM-dd")</td>
                                <td>@record.datetime.ToString("HH:mm:ss")</td>
                                <td>@record.Level</td>
                                <td>
                                    @if (record.IsAlert)
                                    {
                                        <span class="badge bg-danger">Alert</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Normal</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteRecord(record)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">No inundatii data available</h5>
                <p>No records found in the history.</p>
            </div>
        </div>
    }
</div>

<style>
    .text-primary {
        color: #198754;
        font-size: 26px;
        font-weight: bold;
        margin-bottom: 20px;
        text-align: center;
        width: 100%;
    }

    .cards-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
    }

    .card {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 15px 0;
        width: 100%;
        max-width: 800px;
        transition: transform 0.3s ease;
    }

    .card-title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 20px;
    }

    @@media (max-width: 768px) {
        .card {
            width: 90%;
        }
    }
</style>

@code {
    private List<InundatiiRecord> inundatiiData = new List<InundatiiRecord>();
    private string? errorMessage;

    private async Task RefreshData()
    {
        await FetchInundatiiData();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchInundatiiData();
    }

    private async Task FetchInundatiiData()
    {
        try
        {
            errorMessage = null;
            var floods = await DataClient.GetFloodsAsync();
            inundatiiData = floods.Select(f => new InundatiiRecord
            {
                Id = f.Id,
                datetime = f.datetime,
                Level = (int)f.Humidity,
                IsAlert = f.Inundatie
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error fetching inundatii data: {ex.Message}");
        }
    }

    private async Task DeleteRecord(InundatiiRecord record)
    {
        try
        {
            await DataClient.DeleteFloodAsync(record.Id);
            inundatiiData.Remove(record);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting record: {ex.Message}";
        }
    }

    public class InundatiiRecord
    {
        public int Id { get; set; }
        public DateTime datetime { get; set; }
        public int Level { get; set; }
        public bool IsAlert { get; set; }
    }
}